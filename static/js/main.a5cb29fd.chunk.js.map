{"version":3,"sources":["components/visualizer/bar.js","components/visualizer/visualizer.js","components/control/controls.js","helpers/algorithms.js","helpers/audio.js","App.js","reportWebVitals.js","index.js"],"names":["Bar","color","height","is_comparing","is_boundary","is_pivot","is_sorted","finalcolor","style","flex","alignSelf","backgroundColor","Visualizer","delay","algo","nums","comparingNodes","boundaryNodes","pivotNode","sorted","compCount","className","map","num","idx","length","includes","Controls","onDelayChange","algoSelection","onAlgoChange","delayRef","onSizeChange","onVolumeChange","onSort","onStop","isSorting","isSorted","htmlFor","disabled","value","onChange","e","target","id","type","defaultValue","max","min","ref","onClick","_","forwardRef","props","_heapify","mainArray","n","i","actionCollection","largest","left","right","push","payload","temp","quickSort","start","end","partitionIndex","pivot","_partition","mergeSort","auxArray","middle","parseInt","k","j","_merge","audioCtx","AudioContext","master","createGain","gain","setValueAtTime","currentTime","connect","destination","gainNode","oscillator","createOscillator","frequency","playSound","freq","fromValue","linearRampToValueAtTime","cancelScheduledValues","stopSound","changeVolume","val","Number","AppSecond","useState","setComparingNodes","setBoundaryNodes","setCompCount","setPivot","setNums","setIsSorting","setSorted","selectedAlgo","setSelectedAlgo","setDelay","useRef","requestIdRef","useEffect","generateArray","size","array","Math","floor","random","_shuffleArray","_swap","idx1","idx2","_overwrite","_reset","_calculateFreq","num1","num2","high","factor","_takeAction","action","current","count","animate","performance","now","requestAnimationFrame","step","shift","cancelAnimationFrame","swapped","bubbleSort","slice","insertionSort","heapSort","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a5cb29fd.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Bar({\n    color = \"white\",\n    height,\n    is_comparing = false,\n    is_boundary = false,\n    is_pivot = false,\n    is_sorted = false\n}) {\n\n    const finalcolor = is_sorted && \"green\" ||\n        is_boundary && 'lawngreen' ||\n        is_comparing && \"red\" ||\n        is_pivot && 'cyan' ||\n        color\n\n    const style = {\n        flex:'1',\n        alignSelf:'flex-end',\n        height:`${height}%`,\n        backgroundColor: finalcolor\n    }\n\n    return (\n        <span style={style}></span>\n    )\n}\n\nexport default Bar;","import React from 'react'\nimport Bar from './bar'\nimport './visualizer.css'\n\n\nconst Visualizer = ({ delay, algo, nums, comparingNodes, boundaryNodes, pivotNode, sorted, compCount }) => {\n\n    const generateBars = _ => {\n        const mapBars = (num, idx) => (\n            <Bar key={idx}\n                height={(num / nums.length) * 100}\n                is_sorted={sorted}\n                is_comparing={comparingNodes.includes(idx)}\n                is_boundary={boundaryNodes.includes(idx)}\n                is_pivot={idx == pivotNode}\n            />\n        )\n        return nums.map(mapBars)\n    }\n\n    return (\n        <div className=\"visualContainer\">\n            <div className=\"infoSection\">\n                <code>{algo} sort - {compCount} comparisons - {delay} ms delay</code>\n            </div>\n            <div className=\"barSection\">\n                {generateBars()}\n            </div>\n        </div>\n    )\n\n}\n\nexport default Visualizer","import React, { forwardRef } from 'react';\nimport './control.css'\n\nconst Controls = ({\n    delay,\n    onDelayChange,\n    algoSelection,\n    onAlgoChange,\n    delayRef,\n    onSizeChange,\n    onVolumeChange,\n    onSort,\n    onStop,\n    isSorting,\n    isSorted\n}) => {\n\n\n    const doToggle = _ => {\n        isSorting ? onStop() : onSort()\n    }\n\n    return (\n        <div className=\"controlsContainer\">\n\n            <h2>React Sort Sound</h2>\n\n            <div className=\"controlsSection\">\n                <span className=\"control\">\n                    <label htmlFor=\"algo\">Algorithm</label>\n                    <select disabled={isSorting && !isSorted} value={algoSelection} onChange={e => onAlgoChange(e.target.value)}>\n                        <option value=\"merge\">Merge Sort</option>\n                        <option value=\"insertion\">Insertion Sort</option>\n                        <option value=\"quick\">Quick Sort</option>\n                        <option value=\"heap\">Heap Sort</option>\n                        <option value=\"bubble\">Bubble Sort</option>\n                    </select>\n                </span>\n                <span className=\"control\">\n                    <label htmlFor=\"size\">Size</label>\n                    <input id=\"size\" type=\"number\" disabled={isSorting && !isSorted} defaultValue={20} max=\"1000\" onChange={e => onSizeChange(e.target.value)} />\n                </span>\n                <span className=\"control\">\n                    <label htmlFor=\"delay\">Delay</label>\n                    <input id=\"delay\" type=\"range\" value={delay} min=\"1\" max=\"1000\" ref={delayRef} onChange={e => onDelayChange(e.target.value)} />\n                </span>\n                <span className=\"control\">\n                    <label htmlFor=\"volume\">Volume</label>\n                    <input id=\"volume\" type=\"range\" min=\"0\" max=\"100\" onChange={e => onVolumeChange(e.target.value)} />\n                </span>\n                <span className=\"control\">\n                    <button style={{\n                        backgroundColor: isSorting ? \"grey\" : \"#0a73fa\"\n                    }}\n                        onClick={doToggle}>{isSorting ? \"Stop\" : \"Sort\"}</button>\n                </span>\n            </div>\n        </div>\n\n    )\n\n}\n\nexport default forwardRef((props, ref) => {\n    return <Controls {...props} delayRef={ref} />\n\n})","const _heapify = (mainArray, n, i, actionCollection) => {\n    let largest = i\n    const left = 2 * i + 1\n    const right = 2 * i + 2\n\n    actionCollection.push({\n        type: \"boundary\",\n        payload: [i, n]\n    })\n\n\n    if (left < n) {\n\n        actionCollection.push({\n            type: \"compare\",\n            payload: [left, largest]\n        })\n\n        if (mainArray[left] > mainArray[largest])\n            largest = left\n    }\n\n\n    if (right < n) {\n        actionCollection.push({\n            type: \"compare\",\n            payload: [right, largest]\n        })\n\n        if (mainArray[right] > mainArray[largest])\n            largest = right;\n\n    }\n\n    if (largest != i) {\n\n        actionCollection.push({\n            type: \"swapped\",\n            payload: [i, largest]\n        })\n\n        const temp = mainArray[largest]\n        mainArray[largest] = mainArray[i]\n        mainArray[i] = temp;\n        _heapify(mainArray, n, largest, actionCollection);\n    }\n}\n\nconst heapSort = (mainArray, actionCollection) => {\n    const n = mainArray.length\n\n    // Build max heap\n    for (let i = (parseInt(n / 2) - 1); i >= 0; i--) {\n        _heapify(mainArray, n, i, actionCollection)\n    }\n\n    for (let i = n - 1; i >= 0; i--) {\n\n        actionCollection.push({\n            type: \"swapped\",\n            payload: [0, i]\n        })\n\n        const temp = mainArray[0]\n        mainArray[0] = mainArray[i]\n        mainArray[i] = temp\n        _heapify(mainArray, i, 0, actionCollection)\n    }\n\n}\n\n\nconst insertionSort = (mainArray, actionCollection) => {\n    for (let i = 1; i < mainArray.length; i++) {\n        const val = mainArray[i]\n        let j = i - 1\n\n        actionCollection.push({\n            type: \"boundary\",\n            payload: [i]\n        })\n\n        while (j >= 0 && val < mainArray[j]) {\n\n            actionCollection.push({\n                type: \"compare\",\n                payload: [i, j]\n            })\n\n\n            actionCollection.push({\n                type: \"overwrite\",\n                payload: [j + 1, mainArray[j]]\n            })\n\n            mainArray[j + 1] = mainArray[j]\n            --j\n        }\n\n        actionCollection.push({\n            type: \"overwrite\",\n            payload: [j + 1, val]\n        })\n\n        mainArray[j + 1] = val\n    }\n}\n\nconst _partition = (mainArray, start, end, actionCollection) => {\n    const pivot = mainArray[end]\n    let partitionIndex = start\n    for (let i = start; i < end; i++) {\n\n        actionCollection.push({\n            type: \"compare\",\n            payload: [start, i, end, partitionIndex]\n        })\n\n        if (mainArray[i] <= pivot) {\n\n            actionCollection.push({\n                type: \"swapped\",\n                payload: [i, partitionIndex]\n            })\n\n            const temp = mainArray[partitionIndex]\n            mainArray[partitionIndex++] = mainArray[i]\n            mainArray[i] = temp\n        }\n    }\n    actionCollection.push({\n        type: \"swapped\",\n        payload: [end, partitionIndex]\n    })\n    const temp = mainArray[partitionIndex]\n    mainArray[partitionIndex] = mainArray[end]\n    mainArray[end] = temp\n\n    return partitionIndex;\n}\n\n\n\nconst quickSort = (mainArray, start, end, actionCollection) => {\n    if (start < end) {\n        const partitionIndex = _partition(mainArray, start, end, actionCollection)\n        quickSort(mainArray, start, partitionIndex - 1, actionCollection)\n        quickSort(mainArray, partitionIndex + 1, end, actionCollection)\n\n    }\n}\n\n\n\nconst _merge = (mainArray, auxArray, start, middle, end, actionCollection) => {\n    let k = start\n    let i = start\n    let j = middle + 1\n\n    actionCollection.push({\n        type: \"boundary\",\n        payload: [start, end]\n    })\n\n    actionCollection.push({\n        type: \"pivot\",\n        payload: middle\n    })\n\n\n    while (i <= middle && j <= end) {\n\n        actionCollection.push({\n            type: \"compare\",\n            payload: [start, i, j, end]\n        })\n\n        if (auxArray[i] <= auxArray[j]) {\n\n            actionCollection.push({\n                type: \"overwrite\",\n                payload: [k, auxArray[i]]\n            })\n\n            mainArray[k++] = auxArray[i++]\n\n        } else {\n\n            actionCollection.push({\n                type: \"overwrite\",\n                payload: [k, auxArray[j]]\n            })\n\n            mainArray[k++] = auxArray[j++]\n        }\n    }\n\n    while (i <= middle) {\n\n        actionCollection.push({\n            type: \"overwrite\",\n            payload: [k, auxArray[i]]\n        })\n\n\n        mainArray[k++] = auxArray[i++]\n\n    }\n    while (j <= end) {\n\n        actionCollection.push({\n            type: \"overwrite\",\n            payload: [k, auxArray[j]]\n        })\n\n        mainArray[k++] = auxArray[j++]\n\n    }\n}\n\nconst mergeSort = (mainArray, auxArray, start, end, actionCollection) => {\n    if (start == end) return;\n\n    const middle = parseInt((start + end) / 2)\n\n    mergeSort(auxArray, mainArray, start, middle, actionCollection)\n    mergeSort(auxArray, mainArray, middle + 1, end, actionCollection)\n    _merge(mainArray, auxArray, start, middle, end, actionCollection)\n}\n\n\nconst bubbleSort = (mainArray, actionCollection) => {\n    const n = mainArray.length\n\n    for (let i = 0; i < n - 1; i++) {\n        let swapped = false;\n        for (let j = 0; j < n - i - 1; j++) {\n            actionCollection.push({\n                type: \"compare\",\n                payload: [j, j + 1]\n            })\n\n            if (mainArray[j] > mainArray[j + 1]) {\n\n                actionCollection.push({\n                    type: \"swapped\",\n                    payload: [j, j + 1]\n                })\n\n\n                const temp = mainArray[j]\n                mainArray[j] = mainArray[j + 1]\n                mainArray[j + 1] = temp\n                swapped = true\n\n            }\n        }\n        if (!swapped) {\n            break;\n        }\n    }\n}\n\nexport { bubbleSort, mergeSort, quickSort, insertionSort, heapSort }","const audioCtx = new AudioContext()\n\nconst master = audioCtx.createGain()\nmaster.gain.setValueAtTime(0.20, audioCtx.currentTime)\nmaster.connect(audioCtx.destination);\n\nconst gainNode = audioCtx.createGain()\ngainNode.gain.setValueAtTime(0, audioCtx.currentTime)\ngainNode.connect(master)\n\nconst oscillator = audioCtx.createOscillator()\noscillator.type = \"triangle\"\noscillator.frequency.value = 220\noscillator.connect(gainNode)\noscillator.start()\n\n\nconst playSound = (freq, delay, fromValue = 1) => {\n    oscillator.frequency.linearRampToValueAtTime(freq, audioCtx.currentTime)\n    gainNode.gain.cancelScheduledValues(audioCtx.currentTime)\n    gainNode.gain.linearRampToValueAtTime(fromValue, audioCtx.currentTime)\n    gainNode.gain.linearRampToValueAtTime(0, audioCtx.currentTime + delay)\n}\n\nconst stopSound = _ => {\n    gainNode.gain.cancelScheduledValues(0);\n    gainNode.gain.linearRampToValueAtTime(0, audioCtx.currentTime);\n}\n\nconst changeVolume = val => {\n    master.gain.setValueAtTime(Number(val) / 100, audioCtx.currentTime);\n}\n\nexport { audioCtx, master, gainNode, oscillator, playSound, stopSound, changeVolume }","import React, { useState, useEffect, useRef } from 'react';\nimport Visualizer from './components/visualizer/visualizer'\nimport Controls from './components/control/controls';\nimport { bubbleSort, mergeSort, quickSort, insertionSort, heapSort } from './helpers/algorithms'\nimport { playSound, stopSound, changeVolume } from './helpers/audio'\nimport './App.css';\n\n\nfunction AppSecond() {\n\n    const [comparingNodes, setComparingNodes] = useState([])\n    const [boundaryNodes, setBoundaryNodes] = useState([])\n    const [compCount, setCompCount] = useState(0)\n    const [pivot, setPivot] = useState(-1)\n    const [nums, setNums] = useState([])\n    const [isSorting, setIsSorting] = useState(false)\n    const [sorted, setSorted] = useState(false)\n    const [selectedAlgo,setSelectedAlgo] = useState('merge')\n    const [delay,setDelay] = useState(200)\n    const delayRef = useRef();\n    const requestIdRef = useRef()\n\n\n    useEffect(() => {\n        generateArray(20)\n    }, []);\n\n    const _shuffleArray = (array) => {\n        // https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n        for (let i = array.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [array[i], array[j]] = [array[j], array[i]];\n        }\n    }\n\n    const generateArray = (size) => {\n        const nums = [];\n        for (let i = 1; i < size; i++) {\n            nums.push(i)\n        }\n\n        _shuffleArray(nums);\n        setSorted(false)\n        setComparingNodes([])\n        setNums(nums)\n    }\n\n    const _swap = (idx1, idx2) => {\n        const temp = nums[idx1]\n        nums[idx1] = nums[idx2]\n        nums[idx2] = temp;\n\n        setNums([...nums])\n    }\n\n    const _overwrite = (idx, num) => {\n        nums[idx] = num;\n        setNums([...nums])\n    }\n\n    const _reset = _ => {\n        stopSound()\n        setCompCount(0)\n        setSorted(false)\n        setIsSorting(false)\n        setComparingNodes([])\n        setBoundaryNodes([])\n        setPivot(-1)\n    }\n\n    const _complete = _ => {\n        stopSound()\n        setSorted(true)\n        setIsSorting(false)\n        setComparingNodes([])\n        setBoundaryNodes([])\n        setPivot(-1)\n    }\n\n    const _calculateFreq = (num1, num2, high = true) => {\n        const n = nums.length\n        const freq = 440;\n        const factor = ((num1 / n) + (num2 / n) / 2) * freq;\n        return high ? freq + factor : freq - factor\n    }\n\n    const _takeAction = (action) => {\n        const delay = Number(delayRef.current.value)\n\n        switch (action.type) {\n            case \"compare\": {\n                let [i, j] = action.payload\n                setComparingNodes(action.payload)\n                setCompCount(count => count + 1)\n                playSound(_calculateFreq(nums[i], nums[j]), delay, 1)\n                break;\n            }\n            case \"swapped\": {\n                let [i, j] = action.payload;\n                _swap(...action.payload)\n                playSound(_calculateFreq(nums[i], nums[j], false), delay, 0.75)\n                break;\n            }\n            case \"overwrite\": {\n                let [i, num] = action.payload\n                _overwrite(...action.payload)\n                playSound(_calculateFreq(nums[i], num, false), delay, 0.75)\n                break;\n            }\n            case \"boundary\":\n                setBoundaryNodes(action.payload)\n                break;\n            case \"pivot\":\n                setPivot(action.payload)\n                break;\n        }\n    }\n\n\n    const animate = (actionCollection) => {\n        let start = performance.now()\n        const step = (now) => {\n            const elapsed = now - start\n            const delay = Number(delayRef.current.value)\n            if (elapsed > delay) {\n                const action = actionCollection.shift()\n                if (action) {\n                    _takeAction(action)\n                }\n                start = now\n            }\n\n            if (!actionCollection.length) {\n                _complete()\n\n            } else {\n                requestIdRef.current = requestAnimationFrame(step)\n            }\n        }\n\n        requestIdRef.current = requestAnimationFrame(step)\n    }\n\n\n\n    const doSort = _ => {\n        _reset()\n        const actionCollection = [];\n\n        switch (selectedAlgo) {\n            case \"bubble\":\n                bubbleSort(nums.slice(), actionCollection)\n                break\n            case \"merge\":\n                mergeSort(nums.slice(), nums.slice(), 0, nums.length - 1, actionCollection)\n                break;\n            case \"insertion\":\n                insertionSort(nums.slice(), actionCollection)\n                break;\n            case \"quick\":\n                quickSort(nums.slice(), 0, nums.length - 1, actionCollection)\n                break;\n            case \"heap\":\n                heapSort(nums.slice(), actionCollection)\n                break;\n        }\n        setIsSorting(true)\n        animate(actionCollection)\n    }\n\n\n    const _onStop = () => {\n        cancelAnimationFrame(requestIdRef.current)\n        _reset()\n    }\n\n    return (\n        <div className=\"appContainer\">\n\n            <Visualizer\n                nums={nums}\n                delay={delay}\n                algo={selectedAlgo}\n                comparingNodes={comparingNodes}\n                sorted={sorted}\n                boundaryNodes={boundaryNodes}\n                pivotNode={pivot}\n                compCount={compCount}\n            />\n\n            <Controls\n                ref={delayRef}\n                delay={delay}\n                algoSelection={selectedAlgo}\n                onDelayChange={setDelay}\n                onAlgoChange={setSelectedAlgo}\n                onSizeChange={generateArray}\n                onVolumeChange={changeVolume}\n                isSorting={isSorting}\n                isSorted={sorted}\n                onStop={_onStop}\n                onSort={doSort} />\n\n        </div>\n    );\n}\n\n\nexport default AppSecond;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}